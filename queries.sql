-- Task 1: Display the number of states present in the LocationTable
SELECT COUNT(DISTINCT State) AS NumberOfStates FROM LocationTable;

-- Task 2: How many products are of regular type?
SELECT COUNT(*) AS RegularProducts FROM ProductTable WHERE Type = 'Regular';

-- Task 3: How much spending has been done on marketing of product ID 1?
SELECT SUM(Marketing) AS TotalMarketingProduct1 FROM FactTable WHERE ProductId = 1;

-- Task 4: What is the minimum sales of a product?
SELECT MIN(Sales) AS MinSales FROM FactTable;

-- Task 5: Display the max Cost of Goods Sold (COGS)
SELECT MAX(COGS) AS MaxCOGS FROM FactTable;

-- Task 6: Display the details of the product where product type is coffee
SELECT * FROM ProductTable WHERE ProductType = 'Coffee';

-- Task 7: Display the details where total expenses are greater than 40
SELECT * FROM FactTable WHERE TotalExpenses > 40;

-- Task 8: What is the average sales in area code 719?
SELECT AVG(Sales) AS AvgSalesArea719 FROM FactTable WHERE AreaCode = 719;

-- Task 9: Find out the total profit generated by Colorado state
SELECT SUM(f.Profit) AS ColoradoProfit
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
WHERE l.State = 'Colorado';

-- Task 10: Display the average inventory for each product ID
SELECT ProductId, AVG(Inventory) AS AvgInventory
FROM FactTable
GROUP BY ProductId;

-- Task 11: Display state in a sequential order in a Location Table
SELECT DISTINCT State FROM LocationTable ORDER BY State;

-- Task 12: Display the average budget of the Product where the average budget margin should be greater than 100
SELECT ProductId, AVG(BudgetMargin) AS AvgBudgetMargin
FROM FactTable
GROUP BY ProductId
HAVING AVG(BudgetMargin) > 100;

-- Task 13: What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS TotalSales20100101 FROM FactTable WHERE Date = '2010-01-01';

-- Task 14: Display the average total expense of each product ID on an individual date
SELECT Date, ProductId, AVG(TotalExpenses) AS AvgTotalExpenses
FROM FactTable
GROUP BY Date, ProductId;

-- Task 15: Display the table with attributes: date, productID, product_type, product, sales, profit, state, area_code
SELECT f.Date, f.ProductId, p.ProductType, p.Product, f.Sales, f.Profit, l.State, f.AreaCode
FROM FactTable f
JOIN ProductTable p ON f.ProductId = p.ProductId
JOIN LocationTable l ON f.AreaCode = l.AreaCode;

-- Task 16: Display the rank without any gap to show the sales wise rank (simulating DENSE_RANK in SQLite)
SELECT f.*, 
       (SELECT COUNT(DISTINCT f2.Sales) FROM FactTable f2 WHERE f2.Sales > f.Sales) + 1 AS SalesRank
FROM FactTable f
ORDER BY SalesRank;

-- Task 17: Find the state wise profit and sales
SELECT l.State, SUM(f.Profit) AS TotalProfit, SUM(f.Sales) AS TotalSales
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
GROUP BY l.State;

-- Task 18: Find the state wise profit and sales along with the product name
SELECT l.State, p.Product, SUM(f.Profit) AS TotalProfit, SUM(f.Sales) AS TotalSales
FROM FactTable f
JOIN LocationTable l ON f.AreaCode = l.AreaCode
JOIN ProductTable p ON f.ProductId = p.ProductId
GROUP BY l.State, p.Product;

-- Task 19: If there is an increase in sales of 5%, calculate the increased sales
SELECT Date, ProductId, Sales, Sales * 1.05 AS IncreasedSales
FROM FactTable;

-- Task 20: Find the maximum profit along with the product ID and product type
SELECT f.Profit, f.ProductId, p.ProductType
FROM FactTable f
JOIN ProductTable p ON f.ProductId = p.ProductId
WHERE f.Profit = (SELECT MAX(Profit) FROM FactTable);

-- Task 21: Create a stored procedure (MySQL syntax, as SQLite doesnâ€™t support stored procedures)
-- Note: This is provided for reference; run in MySQL or similar
-- DELIMITER //
-- CREATE PROCEDURE GetProductsByType(IN p_type TEXT)
-- BEGIN
--     SELECT * FROM ProductTable WHERE ProductType = p_type;
-- END //
-- DELIMITER ;
-- Usage: CALL GetProductsByType('Coffee');

-- Task 22: Write a query where if total expenses < 60 then 'Profit' else 'Loss' (assuming Profit > 0 intended)
SELECT *, 
       CASE WHEN Profit > 0 THEN 'Profit' ELSE 'Loss' END AS Status
FROM FactTable;

-- Task 23: Give the total weekly sales value with date and product ID details (ROLLUP approximated in SQLite)
SELECT strftime('%W', Date) AS Week, ProductId, SUM(Sales) AS TotalSales
FROM FactTable
GROUP BY Week, ProductId;

-- Task 24: Apply UNION and INTERSECT on tables with AreaCode (INTERSECT simulated in SQLite)
-- UNION example
SELECT AreaCode FROM FactTable WHERE Sales > 100
UNION
SELECT AreaCode FROM FactTable WHERE Profit > 50;
-- INTERSECT simulation
SELECT DISTINCT AreaCode FROM FactTable 
WHERE Sales > 100 AND AreaCode IN (SELECT AreaCode FROM FactTable WHERE Profit > 50);

-- Task 25: Create a user-defined function (PostgreSQL syntax, as SQLite requires extensions)
-- Note: Provided for reference; run in PostgreSQL or similar
-- CREATE FUNCTION GetProductsByType(p_type TEXT) RETURNS SETOF ProductTable AS $$
-- SELECT * FROM ProductTable WHERE ProductType = p_type;
-- $$ LANGUAGE SQL;
-- Usage: SELECT * FROM GetProductsByType('Coffee');

-- Task 26: Change product type from Coffee to Tea for ProductId 1 and undo it
UPDATE ProductTable SET ProductType = 'Tea' WHERE ProductId = 1;
-- Undo
UPDATE ProductTable SET ProductType = 'Coffee' WHERE ProductId = 1;

-- Task 27: Display date, product ID, and sales where total expenses are between 100 and 200
SELECT Date, ProductId, Sales FROM FactTable WHERE TotalExpenses BETWEEN 100 AND 200;

-- Task 28: Delete records in ProductTable for regular type
DELETE FROM ProductTable WHERE Type = 'Regular';

-- Task 29: Display the ASCII value of the fifth character from the Product column
SELECT Product, ASCII(SUBSTR(Product, 5, 1)) AS FifthCharASCII FROM ProductTable;
